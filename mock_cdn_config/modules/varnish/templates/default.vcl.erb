backend default {
  .host = "localhost";
  .port = "8090";
  .probe = {
    .request = "HEAD / HTTP/1.0" "Connection: close";
    .threshold = 1;
    .window = 2;
    .timeout = 5s;
    .initial = 1;
    .expected_response = 200;
    .interval = 10s;
  }
}

backend backup1 {
  .host = "localhost";
  .port = "8091";
  .probe = {
    .request = "HEAD / HTTP/1.0" "Connection: close";
    .threshold = 1;
    .window = 2;
    .timeout = 5s;
    .initial = 1;
    .expected_response = 200;
    .interval = 10s;
  }
}

backend backup2 {
  .host = "localhost";
  .port = "8092";
  .probe = {
    .request = "HEAD / HTTP/1.0" "Connection: close";
    .threshold = 1;
    .window = 2;
    .timeout = 5s;
    .initial = 1;
    .expected_response = 200;
    .interval = 10s;
  }
}

# Please add the minimal amount of code required to implement/mimic the
# functionality you need to test. This shouldn't match our real config
# line-by-line, otherwise we'll have trouble maintaining parity.

acl purge {
  "192.168.0.1";
}

sub vcl_recv {
  if (req.request == "PURGE") {
    if (client.ip ~ purge) {
      return (lookup);
    }
    error 403 "Forbidden";
  }

  if (!req.http.Fastly-SSL) {
     error 801 "Force SSL";
  }

  set req.grace = 24h;

  # Note that if (req.restarts == 1), we don't change the backend as
  # we're attempting to serve from stale.

  if (req.restarts > 1) {
    # Don't serve from stale for backups
    set req.grace = 0s;
    set req.backend = backup1;
  }

  if (req.restarts > 2) {
    set req.backend = backup2;
  }

  set req.http.True-Client-IP = req.http.Fastly-Client-IP;
}

sub vcl_fetch {
  if ((beresp.status >= 500 && beresp.status <= 599) && req.restarts < 3 && (req.request == "GET" || req.request == "HEAD") && !beresp.http.No-Fallback) {
    set beresp.saintmode = 5s;
    return (restart);
  }

  if (req.restarts == 0) {
    set beresp.grace = 24h;
  }

  if (beresp.http.Cache-Control ~ "private") {
    return (hit_for_pass);
  }
}

sub vcl_deliver {

  # Mock the X-Served-By header behaviour to match Fastly.
  # NB "cache-wibble-GDS" is a fake server.identity
  if(!resp.http.X-Served-By) {
    set resp.http.X-Served-By  = "cache-wibble-GDS";
  } else {
    set resp.http.X-Served-By = resp.http.X-Served-By + ", " + "cache-wibble-GDS";
  }

  if(!resp.http.X-Cache-Hits) {
    set resp.http.X-Cache-Hits = obj.hits;
  } else {
    set resp.http.X-Cache-Hits = resp.http.X-Cache-Hits + ", " + obj.hits;
  }

  if(!resp.http.X-Cache) {
    if (obj.hits > 0) {
      set resp.http.X-Cache = "HIT";
    } else {
      set resp.http.X-Cache = "MISS";
    }
  } else {
    if (obj.hits > 0) {
      set resp.http.X-Cache = resp.http.X-Cache + ", HIT";
    } else {
      set resp.http.X-Cache = resp.http.X-Cache + ", MISS";
    }
  }

}

sub vcl_error {
  # Assume we've hit vcl_error() because the backend is unavailable
  # for the first two retries. By restarting, vcl_recv() will try
  # serving from stale before failing over to the backups.
  if (req.restarts < 3) {
    return (restart);
  }

  if (obj.status == 801) {
     set obj.status = 301;
     set obj.response = "Moved Permanently";
     set obj.http.Location = "https://" + req.http.host + req.url;
     synthetic {""};
     return (deliver);
  }
}
